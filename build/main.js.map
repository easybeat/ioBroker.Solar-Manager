{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.3.0\n */\n\nimport axios, { AxiosRequestConfig } from 'axios';\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from '@iobroker/adapter-core';\nimport { SolarManagerGatewayData } from './SolarManagerGatewayData';\nimport { SolarManagerGatewayInfo } from './SolarManagerGatewayInfo';\n\n// Load your modules here, e.g.:\n// import * as fs from \"fs\";\n\nclass SolarManager extends utils.Adapter {\n\tpublic pollInterval: ioBroker.Interval | undefined;\n\n\tpublic constructor(options: Partial<utils.AdapterOptions> = {}) {\n\t\tsuper({\n\t\t\t...options,\n\t\t\tname: 'solar-manager',\n\t\t});\n\t\tthis.on('ready', this.onReady.bind(this));\n\t\tthis.on('stateChange', this.onStateChange.bind(this));\n\t\t// this.on('objectChange', this.onObjectChange.bind(this));\n\t\t// this.on('message', this.onMessage.bind(this));\n\t\tthis.on('unload', this.onUnload.bind(this));\n\t}\n\n\t/**\n\t * Is called when databases are connected and adapter received configuration.\n\t */\n\tprivate async onReady(): Promise<void> {\n\t\t// Initialize your adapter here\n\n\t\t// The adapters config (in the instance object everything under the attribute \"native\") is accessible via\n\t\t// this.config:\n\t\tthis.log.info('config option1: ' + this.config.api_url);\n\t\tthis.log.info('config option2: ' + this.config.password);\n\n\t\t/*\n\t\tFor every state in the system there has to be also an object of type state\n\t\tHere a simple template for a boolean variable named \"testVariable\"\n\t\tBecause every adapter instance uses its own unique namespace variable names can't collide with other adapters variables\n\t\t*/\n\n\t\t// In order to get state updates, you need to subscribe to them. The following line adds a subscription for our variable we have created above.\n\t\t//this.subscribeStates('testVariable');\n\t\t// You can also add a subscription for multiple states. The following line watches all states starting with \"lights.\"\n\t\t// this.subscribeStates('lights.*');\n\t\t// Or, if you really must, you can also watch all states. Don't do this if you don't need to. Otherwise this will cause a lot of unnecessary load on the system:\n\t\t// this.subscribeStates('*');\n\n\t\t/*\n\t\t\tsetState examples\n\t\t\tyou will notice that each setState will cause the stateChange event to fire (because of above subscribeStates cmd)\n\t\t*/\n\t\t// the variable testVariable is set to true as command (ack=false)\n\t\t//await this.setStateAsync('testVariable', true);\n\n\t\t// same thing, but the value is flagged \"ack\"\n\t\t// ack should be always set to true if the value is received from or acknowledged from the target system\n\t\t//await this.setStateAsync('testVariable', { val: true, ack: true });\n\n\t\t// same thing, but the state is deleted after 30s (getState will return null afterwards)\n\t\t//await this.setStateAsync('testVariable', { val: true, ack: true, expire: 30 });\n\n\t\t// examples for the checkPassword/checkGroup functions\n\t\tlet result = await this.checkPasswordAsync('admin', 'iobroker');\n\t\tthis.log.info('check user admin pw iobroker: ' + result);\n\n\t\tresult = await this.checkGroupAsync('admin', 'admin');\n\t\tthis.log.info('check group user admin group admin: ' + result);\n\n\t\t/*try {\n\t\t\tconst gatewayInfo = await this.getGatewayData();\n\n\t\t\tthis.log.debug('Result: ' + JSON.stringify(gatewayInfo.currentPvGeneration));\n\n\t\t\tawait this.setStateAsync('currentPvGeneration', { val: gatewayInfo.currentPvGeneration, ack: true });\n\t\t\t//this.log.debug('Result: ' + JSON.stringify(gatewayInfo.data.currentPowerConsumption));\n\t\t} catch (error) {\n\t\t\tthis.log.error('Fehler beim Aufruf');\n\t\t}*/\n\n\t\tawait this.setStateAsync('info.connection', { val: true, ack: true });\n\n\t\tthis.startupGatewayDataPoll();\n\n\t\tawait this.setGatewayInfoStates();\n\t}\n\n\t/**\n\t * starting up data poll from solar manager cloud\n\t */\n\tprivate async startupGatewayDataPoll(): Promise<void> {\n\t\tthis.pollInterval = this.setInterval(async () => {\n\t\t\tthis.pollGatewayData();\n\t\t}, this.config.pollTime);\n\t}\n\n\t/**\n\t * Is called when adapter shuts down - callback has to be called under any circumstances!\n\t */\n\tprivate onUnload(callback: () => void): void {\n\t\ttry {\n\t\t\t// Here you must clear all timeouts or intervals that may still be active\n\t\t\t// clearTimeout(timeout1);\n\t\t\t// clearTimeout(timeout2);\n\t\t\t// ...\n\t\t\t//this.clearInterval(this.pollInterval);\n\n\t\t\tcallback();\n\t\t} catch (e) {\n\t\t\tcallback();\n\t\t}\n\t}\n\n\tasync setGatewayInfoStates(): Promise<void> {\n\t\ttry {\n\t\t\tconst gatewayInfo = await this.getGatewayInfo();\n\n\t\t\tthis.log.debug('Result: ' + JSON.stringify(gatewayInfo.gateway._id));\n\n\t\t\tawait this.setStateAsync('deviceinfo._id', { val: gatewayInfo.gateway._id, ack: true });\n\t\t\tawait this.setStateAsync('deviceinfo.signal', { val: gatewayInfo.gateway.signal, ack: true });\n\t\t\tawait this.setStateAsync('deviceinfo.name', { val: gatewayInfo.gateway.name, ack: true });\n\t\t\tawait this.setStateAsync('deviceinfo.sm_id', { val: gatewayInfo.gateway.sm_id, ack: true });\n\t\t\tawait this.setStateAsync('deviceinfo.owner', { val: gatewayInfo.gateway.owner, ack: true });\n\t\t\tawait this.setStateAsync('deviceinfo.firmware', { val: gatewayInfo.gateway.firmware, ack: true });\n\t\t\tawait this.setStateAsync('deviceinfo.lastErrorDate', { val: gatewayInfo.gateway.lastErrorDate, ack: true });\n\t\t\tawait this.setStateAsync('deviceinfo.mac', { val: gatewayInfo.gateway.mac, ack: true });\n\t\t\tawait this.setStateAsync('deviceinfo.ip', { val: gatewayInfo.gateway.ip, ack: true });\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t\tthis.log.error('Error getGatewayInfo: ' + error);\n\t\t}\n\t}\n\n\t/**\n\t * Getting detailed information about the gateway.\n\t * https://cloud.solar-manager.ch/\n\t * @returns The gateway information.\n\t */\n\tasync getGatewayInfo(): Promise<SolarManagerGatewayInfo> {\n\t\tconst url = `${this.config.api_url}/info/gateway/${this.config.solarManagerId}`;\n\t\tconst result = await axios.get<SolarManagerGatewayInfo>(url, this.getRequestConfig());\n\n\t\t//this.log.debug('Result: ' + JSON.stringify(result.data));\n\n\t\tif (result.status != 200) {\n\t\t\tthis.log.error('getGatewayInfo failed with status: ' + result.status.toString() + '/' + result.statusText);\n\t\t}\n\n\t\treturn result.data;\n\t}\n\n\tasync pollGatewayData(): Promise<void> {\n\t\ttry {\n\t\t\tconst gatewayData = await this.getGatewayData();\n\n\t\t\tthis.log.debug('Result: ' + JSON.stringify(gatewayData.currentPvGeneration));\n\n\t\t\tawait this.setStateAsync('data.currentPvGeneration', { val: gatewayData.currentPvGeneration, ack: true });\n\t\t\tawait this.setStateAsync('data.currentPowerConsumption', {\n\t\t\t\tval: gatewayData.currentPowerConsumption,\n\t\t\t\tack: true,\n\t\t\t});\n\t\t\tawait this.setStateAsync('data.TimeStamp', { val: gatewayData.TimeStamp, ack: true });\n\t\t\tawait this.setStateAsync('data.soc', { val: gatewayData.soc, ack: true });\n\t\t\tawait this.setStateAsync('data.currentWaterTemp', { val: 0, ack: true }); //not implemented yet\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t\tthis.log.error('Error pollGatewayData: ' + error);\n\t\t}\n\t}\n\n\t/**\n\t * Getting detailed information about general values of production, consumption, and battery and array with the latest values of temperature, battery, and power for each device.\n\t * @returns The gateway current data.\n\t */\n\tasync getGatewayData(): Promise<SolarManagerGatewayData> {\n\t\tconst url = `${this.config.api_url}/stream/gateway/${this.config.solarManagerId}`;\n\t\tconst result = await axios.get<SolarManagerGatewayData>(url, this.getRequestConfig());\n\n\t\t//this.log.debug('Result: ' + JSON.stringify(result.data.devices));\n\n\t\tif (result.status != 200) {\n\t\t\tthis.log.error('getGatewayData failed with status: ' + result.status.toString() + '/' + result.statusText);\n\t\t}\n\n\t\treturn result.data;\n\t}\n\n\t/**\n\t * Getting detailed information about the sensors (devices).\n\t * @returns The device information.\n\t */\n\tasync getDeviceInfo(): Promise<SolarManagerGatewayInfo[]> {\n\t\tconst url = `${this.config.api_url}/info/sensors/${this.config.solarManagerId}`;\n\t\tconst result = await axios.get<SolarManagerGatewayInfo[]>(url, this.getRequestConfig());\n\t\treturn result.data;\n\t}\n\n\t/**\n\t * Generate a request config containing the authentication information for\n\t * Solar Manager.\n\t * @returns The request config for axios.\n\t */\n\tprivate getRequestConfig(): AxiosRequestConfig {\n\t\treturn {\n\t\t\tauth: {\n\t\t\t\tusername: this.config.username,\n\t\t\t\tpassword: this.config.password,\n\t\t\t},\n\t\t};\n\t}\n\n\t// If you need to react to object changes, uncomment the following block and the corresponding line in the constructor.\n\t// You also need to subscribe to the objects with `this.subscribeObjects`, similar to `this.subscribeStates`.\n\t// /**\n\t//  * Is called if a subscribed object changes\n\t//  */\n\t// private onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\n\t// \tif (obj) {\n\t// \t\t// The object was changed\n\t// \t\tthis.log.info(`object ${id} changed: ${JSON.stringify(obj)}`);\n\t// \t} else {\n\t// \t\t// The object was deleted\n\t// \t\tthis.log.info(`object ${id} deleted`);\n\t// \t}\n\t// }\n\n\t/**\n\t * Is called if a subscribed state changes\n\t */\n\tprivate onStateChange(id: string, state: ioBroker.State | null | undefined): void {\n\t\tif (state) {\n\t\t\t// The state was changed\n\t\t\tthis.log.info(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\n\t\t} else {\n\t\t\t// The state was deleted\n\t\t\tthis.log.info(`state ${id} deleted`);\n\t\t}\n\t}\n\n\t// If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\n\t// /**\n\t//  * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\n\t//  * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\n\t//  */\n\t// private onMessage(obj: ioBroker.Message): void {\n\t// \tif (typeof obj === 'object' && obj.message) {\n\t// \t\tif (obj.command === 'send') {\n\t// \t\t\t// e.g. send email or pushover or whatever\n\t// \t\t\tthis.log.info('send command');\n\n\t// \t\t\t// Send response in callback if required\n\t// \t\t\tif (obj.callback) this.sendTo(obj.from, obj.command, 'Message received', obj.callback);\n\t// \t\t}\n\t// \t}\n\t// }\n}\n\nif (require.main !== module) {\n\t// Export the constructor in compact mode\n\tmodule.exports = (options: Partial<utils.AdapterOptions> | undefined) => new SolarManager(options);\n} else {\n\t// otherwise start the instance directly\n\t(() => new SolarManager())();\n}\n"],
  "mappings": "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",
  "names": ["axios"]
}
